
Timmers_Trabajo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000428  08000438  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000428  08000428  00010438  2**0
                  CONTENTS
  4 .ARM          00000000  08000428  08000428  00010438  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000428  08000438  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000438  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000438  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b1e  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001b5  00000000  00000000  00010f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000068  00000000  00000000  00011140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  000111a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c32c  00000000  00000000  000111f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000060d  00000000  00000000  0002d524  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e4c6  00000000  00000000  0002db31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbff7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  000cc074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800040c 	.word	0x0800040c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800040c 	.word	0x0800040c

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <TIM2_IRQHandler>:
int main(void);
void delay(volatile uint32_t s);


void TIM2_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

	while(1){

			delay(LEDDELAY_1);   	//Llamado a función de reatardo para temporizador
 800025c:	480a      	ldr	r0, [pc, #40]	; (8000288 <TIM2_IRQHandler+0x30>)
 800025e:	f000 f865 	bl	800032c <delay>
			GPIOA->ODR |=(1<<5); 	//Encender led
 8000262:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026c:	f043 0320 	orr.w	r3, r3, #32
 8000270:	6153      	str	r3, [r2, #20]
			delay(LEDDELAY_1); 		////Llamado a función de reatardo para temporizador
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <TIM2_IRQHandler+0x30>)
 8000274:	f000 f85a 	bl	800032c <delay>
			GPIOA->ODR &=(0<<5); 	//apagar led
 8000278:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000282:	2200      	movs	r2, #0
 8000284:	615a      	str	r2, [r3, #20]
			delay(LEDDELAY_1);   	//Llamado a función de reatardo para temporizador
 8000286:	e7e9      	b.n	800025c <TIM2_IRQHandler+0x4>
 8000288:	000f4240 	.word	0x000f4240

0800028c <main>:
	}

}

int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR = 0x00000005; //Registro de habilitación de reloj periférico AHB2
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <main+0x98>)
 8000292:	2205      	movs	r2, #5
 8000294:	64da      	str	r2, [r3, #76]	; 0x4c
								   //Se habilita para los GPIOA y GPIOC

	// Se configura el pin 5 (bits 11-10 del registro) del GPIOA como salida
	//Este pin es el led verde del sistema de desarrollo
	GPIOA->MODER &= 0xABFFFFFF;		// Se limpia los bits 11-10 para el pin 5
 8000296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a0:	f023 43a8 	bic.w	r3, r3, #1409286144	; 0x54000000
 80002a4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= 0xFFFFF7FF;		// Para configurar como salida se escribe en los bits
 80002a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002b4:	6013      	str	r3, [r2, #0]
									//11-10 el valor 01 respectivamente.

	// Se configura el pin 13 (bits 27-26 del registro) del GPIOC como entrada
	//Este pin corresponde a el boton de usuario del sistema de desarrollo
	GPIOC->MODER &= 0xFFFFFFFF;		// Se limpia los bits 27-26 para el pin 13
 80002b6:	4b1c      	ldr	r3, [pc, #112]	; (8000328 <main+0x9c>)
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <main+0x9c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= 0xF3FFFFFF;		// Para configurar como entrada se escribe en los bits
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <main+0x9c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a19      	ldr	r2, [pc, #100]	; (8000328 <main+0x9c>)
 80002c4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80002c8:	6013      	str	r3, [r2, #0]
									//27-26 el valor 00 respectivamente.

    RCC->APB1ENR1 |= (1<<0);  //Se activa el reloj del timmer 2
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <main+0x98>)
 80002cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002ce:	4a15      	ldr	r2, [pc, #84]	; (8000324 <main+0x98>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6593      	str	r3, [r2, #88]	; 0x58

    RCC->APB2ENR = 0x00000001;  //Se activa SYSCFG clock para configurar varios aspectos del sistema,
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <main+0x98>)
 80002d8:	2201      	movs	r2, #1
 80002da:	661a      	str	r2, [r3, #96]	; 0x60
    						 	// como la compensación de E/S



    TIM2->PSC = 8;   //Aquí es donde se define el prescalador del timmer 2
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e0:	2208      	movs	r2, #8
 80002e2:	629a      	str	r2, [r3, #40]	; 0x28

    TIM2->ARR = 100;   //Aquí se establece el periodo del pulso
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e8:	2264      	movs	r2, #100	; 0x64
 80002ea:	62da      	str	r2, [r3, #44]	; 0x2c

    // Update Interrupt Enable
    TIM2->DIER |= (1 << 0);
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM2_IRQn, 2); // Se define una prioridad de nivel 1
 80002fc:	2102      	movs	r1, #2
 80002fe:	201c      	movs	r0, #28
 8000300:	f7ff ff80 	bl	8000204 <__NVIC_SetPriority>

    // Se activa la interrupción configurada
    NVIC_EnableIRQ(TIM2_IRQn);
 8000304:	201c      	movs	r0, #28
 8000306:	f7ff ff5f 	bl	80001c8 <__NVIC_EnableIRQ>

    // Se activa el modulo del timmer 2
    TIM2->CR1 |= (1 << 0);
 800030a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6013      	str	r3, [r2, #0]



	__asm__("NOP"); // Assembly inline can be used if needed
 800031a:	bf00      	nop
	return 0;
 800031c:	2300      	movs	r3, #0
}
 800031e:	4618      	mov	r0, r3
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	48000800 	.word	0x48000800

0800032c <delay>:

void delay(volatile uint32_t s)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	for(s; s>0; s--){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	e011      	b.n	800035c <delay+0x30>
		// Resetear el timmer
		TIM2->EGR |= 0x0001;
 8000338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6153      	str	r3, [r2, #20]
		// Espere hasta que el temporizador llegue a 1000
		// Son 1000 porque el temporizador está funcionando a 1 MHz y 1000
		// genera 1 milisegundo
 		while(TIM2->CNT < 1000);
 8000348:	bf00      	nop
 800034a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000354:	d3f9      	bcc.n	800034a <delay+0x1e>
	for(s; s>0; s--){
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3b01      	subs	r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d1ea      	bne.n	8000338 <delay+0xc>
	}
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	; (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490e      	ldr	r1, [pc, #56]	; (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0b      	ldr	r4, [pc, #44]	; (80003bc <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800039a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 f811 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ff73 	bl	800028c <main>

080003a6 <LoopForever>:

LoopForever:
    b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	20000020 	.word	0x20000020

080003c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC1_2_IRQHandler>
	...

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	4e0d      	ldr	r6, [pc, #52]	; (80003fc <__libc_init_array+0x38>)
 80003c8:	4c0d      	ldr	r4, [pc, #52]	; (8000400 <__libc_init_array+0x3c>)
 80003ca:	1ba4      	subs	r4, r4, r6
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	2500      	movs	r5, #0
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	4e0b      	ldr	r6, [pc, #44]	; (8000404 <__libc_init_array+0x40>)
 80003d6:	4c0c      	ldr	r4, [pc, #48]	; (8000408 <__libc_init_array+0x44>)
 80003d8:	f000 f818 	bl	800040c <_init>
 80003dc:	1ba4      	subs	r4, r4, r6
 80003de:	10a4      	asrs	r4, r4, #2
 80003e0:	2500      	movs	r5, #0
 80003e2:	42a5      	cmp	r5, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003ec:	4798      	blx	r3
 80003ee:	3501      	adds	r5, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003f6:	4798      	blx	r3
 80003f8:	3501      	adds	r5, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000428 	.word	0x08000428
 8000400:	08000428 	.word	0x08000428
 8000404:	08000428 	.word	0x08000428
 8000408:	0800042c 	.word	0x0800042c

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr
 8000424:	0000      	movs	r0, r0
	...
